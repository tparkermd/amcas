{"version":3,"sources":["Instructions.jsx","SchoolDetail.jsx","School.jsx","Welcome.jsx","App.js","reportWebVitals.js","index.js"],"names":["Instructions","className","href","rel","target","SchoolDetail","props","title","details","School","school","shortName","amcasLettersInd","amcasLettersMin","amcasLettersMax","amcasLettersText","letterGuidance","committeeLetterAccepted","individualLetterAccepted","letterPacketsAccepted","psychiatry","missionStatement","Welcome","App","useState","schools","setSchools","schoolIds","setSchoolIds","fetchData","id","fetch","then","x","json","data","medSchoolApplication","constructedData","medSchoolSpecialty","medSchoolInformation","prev","catch","console","log","useEffect","localStorage","getItem","split","setItem","forEach","onChange","e","val","value","replace","Array","isArray","rows","placeholder","onClick","sorted","sort","a","b","map","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07415830.chunk.js","sourcesContent":["export default function Instructions() {\n    return (\n        <>\n            <div>\n                <h3 className=\"mono\">Instructions</h3>\n                <ol>\n                    <li>First, go to your <a href=\"https://mec.aamc.org/msar-ui/#/favorites\" rel=\"noreferrer\" target=\"_blank\">Favorites Dashboard</a> in the MSAR tool.</li>\n                    <li>Ensure you have added all the schools for which you need LOR data.</li>\n                    <li>Right click on the page and click \"Inspect Element\" or \"Inspect\" or something of that nature.</li>\n                    <li>\n                        Look for the \"Console\" interface. If you are struggling to find it, hold down\n                        <div className=\"code\">CMD (or CTRL) + Shift + P</div>\n                        Then type \"Console\" and select the \"Show Console\" item.</li>\n                    <li>Paste the below code into the Console and then hit enter.\n                        <div className=\"code\">\n                            // Code to paste into the console to extract School IDs\n                            <br />\n                            v = [];\n                            <br />\n                            document.querySelectorAll('[href*=medSchoolDetails]').forEach(x => v.push(x.getAttribute('href').split('/').pop()));\n                            <br />\n                            copy(v);\n                        </div>\n                    </li>\n                </ol>\n            </div>\n            <br />\n        </>\n    )\n}","export default function SchoolDetail(props) {\n    const {\n        title,\n        details,\n    } = props;\n\n    return (\n        <div>\n            <strong>{title}</strong>\n            <br />\n            {`${details}`}\n        </div>\n    )\n}","import SchoolDetail from \"./SchoolDetail\";\n\nexport default function School(props) {\n    const {\n        shortName,\n        amcasLettersInd,\n        amcasLettersMin,\n        amcasLettersMax,\n        amcasLettersText,\n        letterGuidance,\n        committeeLetterAccepted,\n        individualLetterAccepted,\n        letterPacketsAccepted,\n        psychiatry,\n        missionStatement,\n    } = props.school;\n\n    return (\n        <div className=\"school\">\n            <h2>{shortName}</h2>\n            <SchoolDetail title=\"AMCAS letters participation\" details={!!amcasLettersInd} />\n            <SchoolDetail title=\"Min Letters\" details={amcasLettersMin} />\n            <SchoolDetail title=\"Max Letters\" details={amcasLettersMax} />\n            <SchoolDetail title=\"Mission Statement for Context\" details={missionStatement} />\n            <SchoolDetail title=\"Letter Guidance\" details={letterGuidance} />\n            <SchoolDetail title=\"Additional letter of evaluation information\" details={amcasLettersText} />\n\n            <div>\n                <strong>Committee Letter Accepted</strong>\n                <br />\n                {committeeLetterAccepted && (committeeLetterAccepted === 'P' ? 'Preferred' : 'Accepted')}\n            </div>\n\n            <div>\n                <strong>Individual Letter Accepted</strong>\n                <br />\n                {individualLetterAccepted && (individualLetterAccepted === 'P' ? 'Preferred' : 'Accepted')}\n            </div>\n\n            <div>\n                <strong>Letter Packets Accepted</strong>\n                <br />\n                {letterPacketsAccepted && (letterPacketsAccepted === 'P' ? 'Preferred' : 'Accepted')}\n            </div>\n\n            <div>\n                <strong>Psychiatry %</strong>\n                <br />\n                <span className=\"specialty\">{psychiatry}</span>%\n            </div>\n\n            <br />\n            <hr />\n            <br />\n        </div>\n    )\n}","export default function Welcome() {\n    return (\n        <>\n            <h2> Welcome </h2>\n            <div>\n                This is a tool to extract the most important AMCAS Letter of Recommendation data.\n            </div>\n            <div>\n                I was becoming extremely frustrated with the \"back and forth\" while selecting the LOR per school\n                and this is how I decided to cope.\n            </div>\n            <br />\n        </>\n    )\n}","import { useEffect, useState } from 'react';\nimport './App.css';\nimport Instructions from './Instructions';\nimport School from './School';\nimport Welcome from './Welcome';\n\n// How to extract school IDs\n// v = [];\n// document.querySelectorAll('[href*=medSchoolDetails]').forEach(x => v.push(x.getAttribute('href').split('/').pop()));\n// copy(v);\n\nfunction App() {\n    const [schools, setSchools] = useState([]);\n    const [schoolIds, setSchoolIds] = useState([]);\n    const fetchData = (id) => {\n        fetch(`https://api.mec.aamc.org/msar-service/medSchool/${id}/profile/CURRENT_EDITION`)\n        .then(x => x.json())\n        .then(x => {\n            const data = x[0];\n            \n            let {\n                shortName,\n                medSchoolApplication: {\n                    amcasLettersInd,\n                    amcasLettersMin,\n                    amcasLettersMax,\n                    amcasLettersText,\n                    letterGuidance,\n                    committeeLetterAccepted,\n                    individualLetterAccepted,\n                    letterPacketsAccepted,\n                },\n                medSchoolSpecialty: { psychiatry },\n                medSchoolInformation: { missionStatement },\n            } = data;\n            \n            amcasLettersMax = amcasLettersMax || 1000;\n            amcasLettersMin = amcasLettersMin || 1;\n            letterGuidance = letterGuidance || 'No guidance, just suffering';\n            amcasLettersText = amcasLettersText || 'Sheesh, no additional information?';\n            \n            const constructedData = {\n                shortName,\n                amcasLettersInd,\n                amcasLettersMin,\n                amcasLettersMax,\n                amcasLettersText,\n                letterGuidance,\n                committeeLetterAccepted,\n                individualLetterAccepted,\n                letterPacketsAccepted,\n                psychiatry,\n                missionStatement\n            }\n\n            setSchools(prev => [...prev, constructedData])\n        }).catch(console.log);\n    }\n    \n    useEffect(() => setSchoolIds(localStorage.getItem('SCHOOL_IDS').split(',') || []), [])\n    useEffect(() => localStorage.setItem('SCHOOL_IDS', schoolIds), [schoolIds])\n    useEffect(() => schoolIds.forEach(fetchData), [schoolIds]);\n    \n    const sortSpecialty = () => {\n        const unsortedSchools = [...schools];\n        const sorted = unsortedSchools.sort((a, b) => b.psychiatry - a.psychiatry);\n        \n        setSchools(sorted);\n    }\n\n    const sortMax = () => {\n        const unsortedSchools = [...schools];\n        const sorted = unsortedSchools.sort((a, b) => b.amcasLettersMax - a.amcasLettersMax);\n        \n        setSchools(sorted);\n    }\n\n    const sortName = () => {\n        const unsortedSchools = [...schools];\n        const sorted = unsortedSchools.sort((a, b) => b.shortName < a.shortName ? 1 : -1);\n        \n        setSchools(sorted);\n    }\n\n    const updateSchoolIds = (e) => {\n        const val = e.target.value.replace('[', '').replace(']', '').replace(/\\n|\"|\\s+/g, '').split(',');\n        Array.isArray(val) && setSchoolIds(val);\n    };\n\n    return (\n        <div className=\"App\">\n            <Welcome />\n            <Instructions />\n\n            <h3 className=\"mono\">\n                Paste your copied School IDs into the box below.\n            </h3>\n            <textarea onChange={updateSchoolIds} value={schoolIds} rows=\"10\" placeholder=\"Enter your school ids here.\" />\n            \n            <br />\n            <br />\n            <br />\n            <hr />\n            <br />\n\n            <div className=\"button-container\">\n                <button onClick={sortSpecialty}> Sort Specialty % </button>\n                <button onClick={sortMax}> Sort Max Number LOR Accepted</button>\n                <button onClick={sortName}> Sort Name</button>\n            </div>\n\n            <br />\n            <hr />\n            <br />\n\n            { schools.map((school, index) => <School school={school} key={index} />) }\n        </div>\n    );\n}\n\nexport default App;\n        ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}