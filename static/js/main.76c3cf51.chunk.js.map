{"version":3,"sources":["Components.styled.jsx","Separator.jsx","Accordion.jsx","FixedDetailsContainer.jsx","Instructions.jsx","SchoolDetail.jsx","School.jsx","Welcome.jsx","App.js","reportWebVitals.js","index.js"],"names":["TEXT_VARIATIONS","mono","css","HeadlineThree","styled","h3","props","clickable","variations","split","map","variation","LeftBorderContainer","div","CenteredText","Select","select","HelperTools","Code","FixedContainer","AppContainer","Main","BUTTON_VARIATIONS","transparent","copy","Button","button","TextArea","textarea","ButtonContainer","SchoolContainer","Separator","Accordion","title","hiddenDetails","defaultOpen","useState","isOpen","setIsOpen","onClick","FixedDetailsContainer","scienceList","nonScienceList","advocacyList","researchList","val","shortName","id","instructionsText","Instructions","href","rel","target","style","position","SchoolDetail","details","School","school","amcasLettersInd","amcasLettersMin","amcasLettersMax","amcasLettersText","letterGuidance","committeeLetterAccepted","individualLetterAccepted","letterPacketsAccepted","medSchoolSpecialty","missionStatement","addToScienceList","addToNonScienceList","addToAdvocacyList","addToResearchList","specialty","Welcome","ensureUnique","arr","Set","App","schools","setSchools","schoolIds","setSchoolIds","setScienceList","setNonScienceList","setAdvocacyList","setResearchList","setSpecialty","getSchoolWithId","find","useEffect","value","localStorage","getItem","key","setItem","forEach","fetch","then","x","json","data","Object","keys","length","medSchoolApplication","constructedData","medSchoolInformation","prev","catch","console","log","fetchData","onChange","e","ids","replace","Array","isArray","rows","placeholder","filter","sp","sorted","sort","a","b","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76c3cf51.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\n\nconst mono = css`\n    font-family: monospace !important;\n`;\n\nconst TEXT_VARIATIONS = {\n    mono,\n};\n\nexport const HeadlineThree = styled.h3`\n    font-weight: 400;\n    cursor: ${(props) => props.clickable ? 'pointer' : 'auto'};\n\n    ${({ variations = '' }) => variations.split(' ').map(variation => TEXT_VARIATIONS[variation])}\n`\n\nexport const LeftBorderContainer = styled.div`\n    border-left: 2px solid #ccc;\n`;\n\nexport const CenteredText = styled.div`\n    text-align: center;\n`;\n\nexport const Select = styled.select`\n    padding: 1rem;\n    margin: 1rem auto 2rem;\n    display: block;\n    text-transform: capitalize;\n`;\n\nexport const HelperTools = styled.div`\n    position: absolute;\n    top: 0;\n    right: 0;\n    padding: 1rem;\n    opacity: 0.1;\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 0.5rem;\n    transition: all 250ms ease;\n    \n    &:hover {\n        &, button {\n            opacity: 1;\n        }\n    }\n`;\n\nexport const Code = styled.div`\n    width: 100%;\n    color: #e4e4e4;\n    background-color: #2b2b2b;\n    font-family: monospace;\n    padding: 0.5rem 1rem;\n    margin: 0.5rem 0;\n    line-height: 2;\n    overflow: auto;\n`;\n\nexport const FixedContainer = styled.div`\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    padding: 2rem;\n    width: 22rem;\n    background: rgba(0,0,0,0.4);\n    height: 100%;\n    overflow-y: auto;\n    \n    @media (max-width: 950px) {\n        position: relative;\n        width: 100%;\n    }\n`;\n\nexport const AppContainer = styled.div`\n    width: calc(100% - 22rem);\n    float: right;\n\n    @media (max-width: 950px) {\n        width: 100%;\n    }\n`;\n\nexport const Main = styled.div`\n    max-width: 800px;\n    padding: 1rem;\n    margin: 0 auto;\n`;\n\nconst transparent = css`\n    border: 1px solid #e4e4e4;\n    color: #e4e4e4;\n    background-color: #2b2b2b;\n    font-size: 0.75rem;\n    padding: 0.25rem;\n    opacity: 0.7;\n\n    &:hover {\n        opacity: 1;\n    }\n`;\n\nconst copy = css`\n    position: absolute;\n    top: 0.5rem;\n    right: 0.5rem;\n`;\n\nconst BUTTON_VARIATIONS = {\n    transparent,\n    copy\n};\n\nexport const Button = styled.button`\n    font-family: 'Prompt', sans-serif !important;\n    background-color: green; /* Green */\n    border: none;\n    color: #FFF;\n    font-weight: 500;\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    width: auto;\n    border-radius: 4px;\n    cursor: pointer;\n\n    ${({ variations = '' }) => variations.split(' ').map(variation => BUTTON_VARIATIONS[variation])}\n`;\n\nexport const TextArea = styled.textarea`\n    background-color: #2b2b2b;\n    width: 100%;\n    padding: 1rem;\n    color: #e4e4e4;\n    font-family: monospace;\n`;\n\nexport const ButtonContainer = styled.div`\n    display: flex;\n    justify-content: space-around;\n`;\n\nexport const SchoolContainer = styled.div`\n    position: relative;\n\n    div {\n        padding: 0.5rem 0;\n    }\n`;","export default function Separator() {\n    return (\n        <>\n            <br />\n            <hr />\n            <br />\n        </>\n    );\n}","import { useState } from 'react';\nimport { HeadlineThree, LeftBorderContainer } from './Components.styled';\n\nexport default function Accordion(props) {\n    const {\n        title,\n        hiddenDetails,\n        defaultOpen,\n    } = props;\n\n    const [isOpen, setIsOpen] = useState(defaultOpen);\n\n\n    return (\n        <div>\n            <HeadlineThree clickable onClick={() => setIsOpen(!isOpen)}>{title}</HeadlineThree>\n            {isOpen && (\n                <LeftBorderContainer>\n                    {hiddenDetails}\n                </LeftBorderContainer>\n            )}\n        </div>\n    )\n}","import Accordion from './Accordion';\nimport { FixedContainer } from './Components.styled';\n\nexport default function FixedDetailsContainer(props) {\n    const {\n        scienceList,\n        nonScienceList,\n        advocacyList,\n        researchList,\n    } = props;\n\n    return (\n        <FixedContainer>\n            <Accordion\n                title=\"Science Professors\"\n                hiddenDetails={ <ul> { scienceList.map(val => <li key={val.id}>{val.shortName}</li>) } </ul>}\n                defaultOpen={true}\n            />\n            \n            <Accordion\n                title=\"Non-Science Professors\"\n                hiddenDetails={ <ul> { nonScienceList.map(val => <li key={val.id}>{val.shortName}</li>) } </ul>}\n                defaultOpen={true}\n            />\n            \n            <Accordion\n                title=\"Advocacy Focused\"\n                hiddenDetails={ <ul> { advocacyList.map(val => <li key={val.id}>{val.shortName}</li>) } </ul>}\n                defaultOpen={true}\n            />\n            \n            <Accordion\n                title=\"Research Focused\"\n                hiddenDetails={ <ul> { researchList.map(val => <li key={val.id}>{val.shortName}</li>) } </ul>}\n                defaultOpen={true}\n            />\n        </FixedContainer>\n    );\n}","import copy from 'copy-to-clipboard';\nimport { Code, Button, HeadlineThree } from './Components.styled';\n\nconst instructionsText = `\nv = [];\ndocument.querySelectorAll('[href*=medSchoolDetails]').forEach(x => v.push(x.getAttribute('href').split('/').pop()));\ncopy(v);\n`\nexport default function Instructions() {\n    return (\n        <>\n            <div>\n                <HeadlineThree variations=\"mono\">Instructions</HeadlineThree>\n                <ol>\n                    <li>First, go to your <a href=\"https://mec.aamc.org/msar-ui/#/favorites\" rel=\"noreferrer\" target=\"_blank\">Favorites Dashboard</a> in the MSAR tool.</li>\n                    <li>Ensure you have added all the schools for which you need LOR data.</li>\n                    <li>Right click on the page and click \"Inspect Element\" or \"Inspect\" or something of that nature.</li>\n                    <li>\n                        Look for the \"Console\" interface. If you are struggling to find it, hold down\n                        <Code>CMD (or CTRL) + Shift + P</Code>\n                        Then type \"Console\" and select the \"Show Console\" item.</li>\n                    <li>Paste the below code into the Console and then hit enter.\n                        <Code style={{ position: 'relative' }}>\n                            {instructionsText}\n                            <Button variations=\"transparent copy\" onClick={() => copy(instructionsText)}>COPY</Button>\n                        </Code>\n                    </li>\n                </ol>\n            </div>\n            <br />\n        </>\n    )\n}","export default function SchoolDetail(props) {\n    const {\n        title,\n        details,\n    } = props;\n\n    return (\n        <div>\n            <strong>{title}</strong>\n            <br />\n            {`${details}`}\n        </div>\n    )\n}","import { Button, HelperTools, SchoolContainer } from './Components.styled';\nimport SchoolDetail from \"./SchoolDetail\";\nimport Separator from './Separator';\n\nexport default function School(props) {\n    const {\n        shortName,\n        amcasLettersInd,\n        amcasLettersMin,\n        amcasLettersMax,\n        amcasLettersText,\n        letterGuidance,\n        committeeLetterAccepted,\n        individualLetterAccepted,\n        letterPacketsAccepted,\n        medSchoolSpecialty,\n        missionStatement,\n        id,\n    } = props.school;\n\n    const {\n        addToScienceList,\n        addToNonScienceList,\n        addToAdvocacyList,\n        addToResearchList,\n        specialty,\n    } = props;\n\n    return (\n        <SchoolContainer id={id} style={{ position: 'relative' }}>\n            <h2>{shortName}</h2>\n            <SchoolDetail title=\"AMCAS letters participation\" details={!!amcasLettersInd} />\n            <SchoolDetail title=\"Min Letters\" details={amcasLettersMin} />\n            <SchoolDetail title=\"Max Letters\" details={amcasLettersMax} />\n            <SchoolDetail title=\"Mission Statement for Context\" details={missionStatement} />\n            <SchoolDetail title=\"Letter Guidance\" details={letterGuidance} />\n            <SchoolDetail title=\"Additional letter of evaluation information\" details={amcasLettersText} />\n\n            <div>\n                <strong>Committee Letter Accepted</strong>\n                <br />\n                {committeeLetterAccepted && (committeeLetterAccepted === 'P' ? 'Preferred' : 'Accepted')}\n            </div>\n\n            <div>\n                <strong>Individual Letter Accepted</strong>\n                <br />\n                {individualLetterAccepted && (individualLetterAccepted === 'P' ? 'Preferred' : 'Accepted')}\n            </div>\n\n            <div>\n                <strong>Letter Packets Accepted</strong>\n                <br />\n                {letterPacketsAccepted && (letterPacketsAccepted === 'P' ? 'Preferred' : 'Accepted')}\n            </div>\n\n            <div>\n                <strong>{specialty} %</strong>\n                <br />\n                <span>{medSchoolSpecialty[specialty]}</span>%\n            </div>\n\n            <Separator />\n\n            <HelperTools>\n                <Button variations=\"transparent\" onClick={() => addToScienceList(id)}>\n                    Add to Science List\n                </Button>\n                <Button variations=\"transparent\" onClick={() => addToNonScienceList(id)}>\n                    Add to Non-Science List\n                </Button>\n                <Button variations=\"transparent\" onClick={() => addToAdvocacyList(id)}>\n                    Add to Advocacy List\n                </Button>\n                <Button variations=\"transparent\" onClick={() => addToResearchList(id)}>\n                    Add to Research List\n                </Button>\n            </HelperTools>\n        </SchoolContainer>\n    )\n}","export default function Welcome() {\n    return (\n        <>\n            <h2> Welcome </h2>\n            <div>\n                This is a tool to extract the most important AMCAS Letter of Recommendation data.\n            </div>\n            <div>\n                I was becoming extremely frustrated with the \"back and forth\" while selecting the LOR per school\n                and this is how I decided to cope.\n            </div>\n            <br />\n        </>\n    )\n}","import { useEffect, useState } from 'react';\n\nimport './App.css';\n\nimport { CenteredText, Select, Button, TextArea, AppContainer, Main, ButtonContainer, HeadlineThree } from './Components.styled';\nimport Separator from './Separator';\nimport FixedDetailsContainer from './FixedDetailsContainer';\nimport Instructions from './Instructions';\nimport School from './School';\nimport Welcome from './Welcome';\n\nconst getLocalStorage = (value) => localStorage && localStorage.getItem && localStorage.getItem(value);\nconst setLocalStorage = (key, value) => localStorage && localStorage.setItem && localStorage.setItem(key, value);\nconst ensureUnique = (arr) => [...new Set(arr)];\n\nfunction App() {\n    const [schools, setSchools] = useState([]);\n    const [schoolIds, setSchoolIds] = useState([]);\n    const [scienceList, setScienceList] = useState([]);\n    const [nonScienceList, setNonScienceList] = useState([]);\n    const [advocacyList, setAdvocacyList] = useState([]);\n    const [researchList, setResearchList] = useState([]);\n    const [specialty, setSpecialty] = useState('psychiatry');\n    \n    const getSchoolWithId = (id) => schools.find(school => school.id === id);\n\n    const fetchData = (id) => {\n        fetch(`https://api.mec.aamc.org/msar-service/medSchool/${id}/profile/CURRENT_EDITION`)\n            .then(x => x.json())\n            .then(x => {\n                const data = x[0];\n                \n                if (!data || !Object.keys(data).length) {\n                    return;\n                }\n\n                let {\n                    shortName,\n                    medSchoolApplication: {\n                        amcasLettersInd,\n                        amcasLettersMin,\n                        amcasLettersMax,\n                        amcasLettersText,\n                        letterGuidance,\n                        committeeLetterAccepted,\n                        individualLetterAccepted,\n                        letterPacketsAccepted,\n                    },\n                    medSchoolSpecialty,\n                    medSchoolInformation: { missionStatement },\n                } = data;\n                \n                amcasLettersMax = amcasLettersMax || 1000;\n                amcasLettersMin = amcasLettersMin || 1;\n                letterGuidance = letterGuidance || 'No guidance, just suffering';\n                amcasLettersText = amcasLettersText || 'Sheesh, no additional information?';\n                \n                const constructedData = {\n                    shortName,\n                    amcasLettersInd,\n                    amcasLettersMin,\n                    amcasLettersMax,\n                    amcasLettersText,\n                    letterGuidance,\n                    committeeLetterAccepted,\n                    individualLetterAccepted,\n                    letterPacketsAccepted,\n                    medSchoolSpecialty,\n                    missionStatement,\n                    id,\n                }\n\n                setSchools(prev => [...prev, constructedData])\n            }).catch(console.log);\n    }\n    \n    useEffect(() => setSchoolIds((getLocalStorage('SCHOOL_IDS') || '').split(',') || []), [])\n    useEffect(() => setLocalStorage('SCHOOL_IDS', schoolIds), [schoolIds])\n    useEffect(() => {\n        schoolIds.forEach((id) => !schools.find(school => school.id === id) && fetchData(id))\n    }, [schoolIds]);\n    \n    const sortSpecialty = () => {\n        const unsortedSchools = [...schools];\n        const sorted = unsortedSchools.sort((a, b) => b.medSchoolSpecialty[specialty] - a.medSchoolSpecialty[specialty]);\n        \n        setSchools(sorted);\n    }\n\n    const sortMax = () => {\n        const unsortedSchools = [...schools];\n        const sorted = unsortedSchools.sort((a, b) => b.amcasLettersMax - a.amcasLettersMax);\n        \n        setSchools(sorted);\n    }\n\n    const sortName = () => {\n        const unsortedSchools = [...schools];\n        const sorted = unsortedSchools.sort((a, b) => b.shortName < a.shortName ? 1 : -1);\n        \n        setSchools(sorted);\n    }\n\n    const updateSchoolIds = (e) => {\n        const ids = e.target.value.replace('[', '').replace(']', '').replace(/\\n|\"|\\s+/g, '').split(',');\n        Array.isArray(ids) && setSchoolIds([...new Set(ids)]);\n    };\n\n    const addToScienceList = (id) => setScienceList(prev => ensureUnique([...prev, getSchoolWithId(id)]));\n    const addToNonScienceList = (id) => setNonScienceList(prev => ensureUnique([...prev, getSchoolWithId(id)]));\n    const addToAdvocacyList = (id) => setAdvocacyList(prev => ensureUnique([...prev, getSchoolWithId(id)]));\n    const addToResearchList = (id) => setResearchList(prev => ensureUnique([...prev, getSchoolWithId(id)]));\n\n    return (\n        <div>\n            <FixedDetailsContainer \n                scienceList={scienceList}\n                nonScienceList={nonScienceList}\n                advocacyList={advocacyList}\n                researchList={researchList}\n            />\n            <AppContainer>\n                <Main>\n                    <Welcome />\n                    <Instructions />\n\n                    <HeadlineThree variations=\"mono\">\n                        Paste your copied School IDs into the box below.\n                    </HeadlineThree>\n                    <TextArea onChange={updateSchoolIds} value={schoolIds} rows=\"10\" placeholder=\"Enter your school ids here.\" />\n                    \n                    { !!schools.length && (\n                        <>\n                            <br />\n                            <br />\n                            <Separator />\n\n                            <CenteredText>\n                                Select Specialty\n                                <Select\n                                    value={specialty}\n                                    onChange={(e) => setSpecialty(e.target.value)}\n                                >\n                                    { \n                                        schools[0] && schools[0].medSchoolSpecialty && (\n                                            Object.keys(schools[0].medSchoolSpecialty)\n                                                .filter(sp => sp !== 'medicalSchoolId')\n                                                .map(sp => <option value={sp} key={sp}>{sp}</option>)\n                                        )\n                                    }\n                                </Select>\n                            </CenteredText>\n                            <ButtonContainer>\n                                <Button onClick={sortSpecialty}> Sort Specialty % </Button>\n                                <Button onClick={sortMax}> Sort Max Number LOR Accepted</Button>\n                                <Button onClick={sortName}> Sort Name</Button>\n                            </ButtonContainer>\n\n                            <Separator />\n                        </>\n                    )}\n\n                    <ul>\n                        { schools.map((school) => <li key={school.id}><a href={`#${school.id}`}>{school.shortName}</a></li>) }\n                    </ul>\n\n                    <Separator />\n\n                    { schools.map((school) => (\n                        <School\n                            school={school}\n                            key={school.id}\n                            specialty={specialty}\n                            addToScienceList={addToScienceList}\n                            addToNonScienceList={addToNonScienceList}\n                            addToAdvocacyList={addToAdvocacyList}\n                            addToResearchList={addToResearchList}\n                        />\n                    )) }\n                </Main>\n            </AppContainer>\n        </div>\n    );\n}\n\nexport default App;\n        ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}